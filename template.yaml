apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: hdfs-outputport-template.1
  title: HDFS Output Port
  description: Create a component to expose and manage access to an HDFS directory
  mesh:
    icon: https://upload.wikimedia.org/wikipedia/commons/thumb/0/0e/Hadoop_logo.svg/320px-Hadoop_logo.svg.png
  tags:
    - cdp-private
    - hdfs
    - output-port
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  generates: componenttype:default/outputport
  owner: agilelab
  type: outputport
  parameters:
    - $yaml: ./header.yaml
    - title: Component metadata
      description: Basic information for this component.
      required:
        - name
        - domain
        - dataproduct
        - description
      properties:
        name:
          title: Name
          type: string
          description: Required name used for display purposes
          ui:field: EntityNamePicker
          default: HDFS Output Port
          ui:options:
            allowArbitraryValues: true
        fullyQualifiedName:
          title: Fully Qualified Name
          type: string
          description: Output port fully qualified name
        description:
          title: Description
          type: string
          description: Help others understand what this Output Port is for
          default: Output Port that exposes data stored on an HDFS directory
        domain:
          title: Domain
          type: string
          description: Domain of the Data Product this Output Port belongs to
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - Domain
        dataproduct:
          title: Data Product
          type: string
          description: Data Product this Output Port belongs to
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - System
        identifier:
          title: Identifier
          type: string
          description: A unique identifier for the entity inside the domain. It will not be editable after creation and is expected to be a string that is sequences of [a-zA-Z] separated by any of [-_]
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        developmentGroup:
          title: Development Group
          type: string
          description: Data Product development group
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false

    - title: Data contract schema
      description: |
        Choose the schema for this Output Port that will be inserted on the Data Contract. 
        You can either inherit it from an existing component of a certain kind, or leave it empty
        and add it manually at a later stage using Witboost Editor Wizard.
      required: [ inheritSchema ]
      properties:
        inheritSchema:
          title: Choose one
          type: boolean
          ui:widget: select
          default: false
          oneOf:
            - const: true
              title: Inherit schema from an existing component
            - const: false
              title: Leave schema empty
      dependencies:
        inheritSchema:
          oneOf:
            - properties:
                inheritSchema:
                  const: false
            - required:
                - schemaDefinition
              properties:
                inheritSchema:
                  const: true
                schemaDefinition:
                  ui:options:
                    displayTitle: false
                  type: object
                  required:
                    - inheritSchemaComponent
                    - schemaColumns
                  properties:
                    inheritSchemaComponent:
                      title: Storage component
                      type: string
                      description: Choose an storage component from which the schema will be inherited.
                      ui:field: EntityRelationsPicker
                      ui:filters:
                        - key: spec.type
                          value: storage
                      ui:fieldName: dataproduct
                      relation: hasPart
                    schemaColumns:
                      title: Is schema selected?
                      ui:field: EntitySelectionPicker
                      ui:fieldName: schemaDefinition.inheritSchemaComponent
                      ui:property: spec.mesh.specific.tableSchema

    - title: Provide HDFS deployment information
      required:
        - dependsOn
      description: This template will expose the HDFS directory created by an HDFS Storage Area
      properties:
        dependsOn:
          title: HDFS Storage Area dependency
          type: string
          description: Choose the HDFS Storage Area component to be exposed by this Output Port
          ui:field: EntityRelationsPicker
          ui:fieldName: dataproduct
          relation: hasPart
          ui:filters:
            - key: spec.mesh.useCaseTemplateId
              value: urn:dmb:utm:cdp-private-hdfs-storage-template:0.0.0
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: '.'
        values:
          name: '${{ parameters.name }}'
          fullyQualifiedName: '${{ parameters.fullyQualifiedName }}'
          description: '${{ parameters.description }}'
          domain: '${{ parameters.domain }}'
          dataproduct: '${{ parameters.dataproduct }}'
          identifier: '${{ parameters.identifier }}'
          developmentGroup: '${{ parameters.developmentGroup }}'
          inheritSchema: '${{ parameters.inheritSchema }}'
          schemaColumns: '${{ parameters.schemaDefinition.schemaColumns }}'
          dependsOn: '${{ parameters.dependsOn }}'
          useCaseTemplateId: urn:dmb:utm:cdp-private-hdfs-outputport-template:0.0.0
          infrastructureTemplateId: urn:dmb:itm:cdp-private-hdfs-provisioner:0
          repoUrl: &destination 'gitlab.com?owner=AgileDMBSandbox${{orgname}}%2Fmesh.repository%2F${{ parameters.domain | replace(r/domain:| |-/, "") }}%2F${{ parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "") }}&repo=${{ parameters.name.split(" ") | join("") | lower }}'
          owner: 'AgileDMBSandbox${{orgname}}%2Fmesh.repository/${{ parameters.domain | replace(r/domain:| |-/, "") }}/${{ parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "") }}'
          repo: '${{ parameters.name.split(" ") | join("") | lower }}'
          useCaseTemplateVersion: 0.0.0

    - id: publish
      name: Publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts: ['gitlab.com']
        description: 'This is ${{ parameters.name }}'
        repoUrl: *destination
        rootDirectory: '.'
        dataproduct: '${{ parameters.dataproduct }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: '${{ steps.publish.output.remoteUrl }}'
      - title: Open in catalog
        icon: catalog
        entityRef: '${{ steps.register.output.entityRef }}'
